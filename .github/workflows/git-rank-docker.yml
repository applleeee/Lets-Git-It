name: Product-Deploy

on: workflow_dispatch

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
  VERSION: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Unit test
        run: npm test
      - name: Build
        run: npm run build --if-present

  docker-push:
    name: docker build and push
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: docker-push
    runs-on: [self-hosted, prod]
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker run
        run: docker ps -a --filter "name=git_rank" | grep -q . && docker stop git_rank && docker rm -f git_rank && docker run -it -d -p 3000:3000 --name git_rank -e AUTH_ACCESS_TOKEN=${{ secrets.AUTH_ACCESS_TOKEN }} -e AUTH_CLIENT_ID=${{ secrets.AUTH_CLIENT_ID }} -e AUTH_CLIENT_SECRETS=${{ secrets.AUTH_CLIENT_SECRETS }} -e PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} -e DB_DATABASE_PROD=${{ secrets.DB_DATABASE_PROD }} -e DB_HOST_PROD=${{ secrets.DB_HOST_PROD }} -e DB_USERNAME_PROD=${{ secrets.DB_USERNAME_PROD }} -e DB_TYPE=${{ secrets.DB_TYPE }} -e DB_PASSWORD_PROD=${{ secrets.DB_PASSWORD_PROD }} -e DB_LOGGING_PROD=${{ secrets.DB_LOGGING_PROD }} -e DB_SYNCHRONIZE_PROD=${{ secrets.DB_SYNCHRONIZE_PROD }} -e DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }} -e DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} -e JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }} -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} -e JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }} -e JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }} -e REFRESH_SALT=${{ secrets.REFRESH_SALT }} -e REFRESH_ITERATIONS=${{ secrets.REFRESH_ITERATIONS }} -e REFRESH_KEYLEN=${{ secrets.REFRESH_KEYLEN }} -e REFRESH_DIGEST=${{ secrets.REFRESH_DIGEST }} -e COOKIE_SECRET_KEY=${{ secrets.COOKIE_SECRET_KEY }} -e COOKIE_CLIENT_DOMAIN=${{ secrets.COOKIE_CLIENT_DOMAIN }} -e PORT=${{ secrets.PORT }} -e S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }} -e S3_BUCKET_NAME_PROD=${{ secrets.S3_BUCKET_NAME_PROD }} -e S3_SECRET_ACEESS_KEY=${{ secrets.S3_SECRET_ACEESS_KEY}} -v /home/ubuntu/.aws/credentials:/root/.aws/credentials --restart always ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
  cleanup:
    name: Clean up docker images
    needs: [build, deploy]
    runs-on: [self-hosted, prod]
    steps:
      - name: Clean up docker images
        run: docker rmi $(docker images --filter "before=${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}" --filter=reference="${{ env.DOCKER_IMAGE }}:*" -q)
